{"version":3,"sources":["Song.js","Title.js","TweetButton.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","song","songData","className","Title","TweetButton","href","class","data-show-count","async","src","charset","App","state","e","preventDefault","fetch","then","res","json","setState","catch","err","console","log","message","this","Song","onSubmit","handleSubmit","type","renderSong","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"gOAuBeA,MArBf,SAAiBC,GAEb,IAAMC,EAAOD,EAAME,SAEnB,OACI,6BACA,yBAAKC,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,KACA,yBAAKE,UAAU,WAAU,0BAAMA,UAAU,SAAzC,IAAyDF,EAAK,GAA9D,OCLOG,MAVf,SAAeJ,GACX,OACI,6BACI,wBAAIG,UAAW,SAAf,iCCSGE,MAZf,SAAqBL,GACjB,OACE,6BACE,uBAAGM,KAAK,gDAAgDC,MAAM,cAAcC,kBAAgB,SAC5F,uBAAGD,MAAM,mBADT,SAIA,4BAAQE,OAAK,EAACC,IAAI,0CAA0CC,QAAQ,YCyE7DC,G,wDAzEb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAEDa,MAAQ,CACXX,SAAU,MAJK,E,yDASNY,GAAI,IAAD,OACdA,EAAEC,iBAMFC,MAHS,4CAGEC,MAAK,SAAAC,GAEd,OAAOA,EAAIC,UACVF,MAAK,SAACE,GAEP,EAAKC,SAAS,CAAElB,SAAUiB,OAKzBE,OAAM,SAACC,GAER,EAAKF,SAAS,CAAElB,SAAU,OAE1BqB,QAAQC,IAAI,wBACZD,QAAQC,IAAIF,EAAIG,c,mCAKN,IACJvB,EAAawB,KAAKb,MAAlBX,SAGR,GAAiB,OAAbA,EASJ,OAAO,kBAACyB,EAAD,CAAMzB,SAAUA,M,+BAEf,IAAD,OAEP,OACE,yBAAKC,UAAU,OACb,6BACE,kBAAC,EAAD,OAEF,0BAAMyB,SAAU,SAAAd,GAAC,OAAI,EAAKe,aAAaf,KACrC,4BAAQgB,KAAK,UAAb,kBAEDJ,KAAKK,aACR,6BACE,kBAAC,EAAD,Y,GAhEUC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMvB,a","file":"static/js/main.948f8d9c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Weather(props){\n\n    const song = props.songData;\n\n    return (\n        <div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[0]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[1]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[2]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[3]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[4]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[5]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[6]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[7]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[8]} </div>\n        <div className=\"weather\"><span className=\"bold\"></span> {song[9]} </div>\n    \n        </div>\n    );\n}\n\nexport default Weather;","import React from 'react';\n\nfunction Title(props){\n    return (\n        <div>\n            <h1 className ='title'>\n                Generate your Country Song!\n            </h1>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\n\nfunction TweetButton(props){\n    return (\n      <div>\n        <a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" class=\"tweetbutton\" data-show-count=\"false\">\n        <i class=\"fab fa-twitter\"></i>\n          Tweet\n        </a>\n        <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n      </div>\n    )\n}\n\nexport default TweetButton;","import React, { Component } from 'react';\nimport Song from './Song.js'\nimport Title from './Title';\nimport TweetButton from './TweetButton'\n// import ErrorMessage from './ErrorMessage';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      songData: null,  // Used to hold data loaded from the weather API\n    };\n    // this.weatherData = null\n  }\n\n  handleSubmit(e) {\n    e.preventDefault()\n\n    // const url = `http://localhost:5000/`;\n    const url = `https://country-tweet-api.herokuapp.com/`;\n\n    // Get data from the API with fetch\n    fetch(url).then(res => {\n      // Handle the response stream as JSON\n      return res.json()\n    }).then((json) => {\n      // If the request was successful assign the data to component state\n      this.setState({ songData: json })\n\n      // ! This needs better error checking here or at renderWeather() \n      // It's possible to get a valid JSON response that is not weather \n      // data, for example when a bad zip code entered.\n    }).catch((err) => {\n      // If there is no data \n      this.setState({ songData: null }) // Clear the weather data we don't have any to display\n      // Print an error to the console. \n      console.log('-- Error fetching --')\n      console.log(err.message)\n      // You may want to display an error to the screen here. \n    })\n  }\n\n  renderSong() {\n    const { songData } = this.state;\n\n    // This method returns undefined or a JSX component\n    if (songData === null) {\n      // If there is no data return undefined\n      return undefined\n    }\n\n    // if (songData.cod === '404' || songData.cod === '400') {\n    //   return <ErrorMessage message={songData.message} />;\n    // }\n\n    return <Song songData={songData} />;\n  }\n  render() {\n    // const { inputValue } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          <Title />\n        </div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <button type=\"submit\">Generate Song</button>\n        </form>\n        {this.renderSong()}\n      <div>\n        <TweetButton />\n      </div>\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}